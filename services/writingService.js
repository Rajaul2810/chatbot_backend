const openai = require('../utils/openaiClient');

const generateWritingResponse = async (userInput, question) => {
  const systemPrompt = `You are an IELTS Writing examiner.

- AiGenerateWriting: check the student's writing is generated by AI or not. if generated by AI then return the percentage of AI writing like 50% or 60% or 70% or 80% or 90% or 100%.
- AiMotivation: A motivational paragraph for the student to improve their writing in english small sentence cheer up sentence.
- AiSuggestions: A list of suggestions for the student to improve their writing in english small sentence.

- TotalGrammerError: Total grammer error in the student's writing.
- TotalVocabularyError: Total vocabulary error in the student's writing.
- TotalSentenceError: Total sentence error in the student's writing.
- ReWriteImprovementVersion: rewrite the student's writing with improvement version.
- ReWriteCorrectWords: surround the original incorrect parts with ❌ ❌ and the corrected version with ✅ ✅ and ' → ' separate within incorrect and corrected parts.Output the full rewritten paragraph with corrections embedded.
- ReWriteCorrectWords: example: ❌ schol ❌ → ✅ school ✅

- ReWriteCorrectSentences: surround the original incorrect parts with ❌ ❌ and the corrected version with ✅ ✅ and ' → ' separate within incorrect and corrected parts. Output the full rewritten paragraph with corrections embedded and full sentence.
- ReWriteCorrectSentences: example: ❌ i school ❌ → ✅ I go to school ✅

Evaluate the student's writing based on IELTS Band Descriptors:
- Task Achievement (TA)
- Coherence and Cohesion (CC)
- Lexical Resource (LR)
- Grammatical Range and Accuracy (GRA)

For each criterion, provide:
- Score (decimal format, score 1.0,1.5 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0) always use this score. 


 

Output the entire response ONLY in the following strict JSON format. always use this format do not change anything and do not empty any field:
{
  "AiGenerateWriting": "",
  "AiMotivation": "",
  "AiSuggestions": "",
  "TotalGrammerError": "",
  "TotalVocabularyError": "",
  "TotalSentenceError": "",
  "ReWriteCorrectWords": "",
  "ReWriteCorrectSentences": "",
  "ReWriteImprovementVersion": "",
  "taskAchievement": {
    "score": 0
  },
  "coherenceAndCohesion": {
    "score": 0
  },
  "lexicalResource": {
    "score": 0
  },
  "grammaticalRangeAndAccuracy": {
    "score": 0
  },
  "overallBandScore": 0,
  "generalFeedback": ""
}


Student's Writing:
${userInput}

Question:
${question}
    `;

  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o', //gpt-4o-mini //gpt-4o //gpt-3.5-turbo
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userInput }
      ],
      temperature: 0.7,
    });

    const content = completion.choices[0].message.content;
    if (!content) {
      throw new Error("OpenAI returned empty content.");
    }

    try {
      const parsedContent = JSON.parse(content);
      return parsedContent;
    } catch (parseError) {
      console.error("Error parsing OpenAI response:", parseError);
      console.error("Raw OpenAI response content:", content); // Log the raw content for debugging
      throw new Error("Failed to parse evaluation data from AI service.");
    }

  } catch (error) {
    console.error("Error calling OpenAI API:", error);
    // Re-throw a more generic error to the caller, or handle specific error types
    throw new Error("Failed to get evaluation from AI service.");
  }
};

module.exports = { generateWritingResponse };


