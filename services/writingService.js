const openai = require('../utils/openaiClient');

const generateWritingResponse = async (userInput, question) => {
  const systemPrompt = `You are an IELTS Writing examiner.

- AiGenerateWriting: check the student's writing is generated by AI or not. if generated by AI then return the percentage of AI writing like 50% or 60% or 70% or 80% or 90% or 100%.
- AiMotivation: A motivational paragraph for the student to improve their writing in bangla choto sentence cheer up sentence jodi student ai diye lekiye take tahole take domok dite hobe.
- AiSuggestions: A list of suggestions for the student to improve their writing in bangla choto sentence.


Evaluate the student's writing based on IELTS Band Descriptors:
- Task Achievement (TA)
- Coherence and Cohesion (CC)
- Lexical Resource (LR)
- Grammatical Range and Accuracy (GRA)

For each criterion, provide:
- Score (decimal format, between 1.0 and 9.0)
- Strengths (list of strong points)
- Improvements (list of suggestions)
- Examples (if needed, for vocabulary or cohesion words)
- Short paragraph feedback

 

Output the entire response ONLY in the following strict JSON format:
{
 "AiGenerateWriting": "",
  "AiMotivation": "",
  "AiSuggestions": "",
  "taskAchievement": {
    "score": 0,
    "strengths": [],
    "improvements": [],
    "feedback": ""
  },
  "coherenceAndCohesion": {
    "score": 0,
    "strengths": [],
    "examples": [],
    "feedback": ""
  },
  "lexicalResource": {
    "score": 0,
    "strengths": [],
    "examples": [],
    "improvements": [],
    "feedback": ""
  },
  "grammaticalRangeAndAccuracy": {
    "score": 0,
    "strengths": [],
    "improvements": [],
    "feedback": ""
  },
  "overallBandScore": 0,
  "generalFeedback": ""
}


Student's Writing:
${userInput}

Question:
${question}
    `;

  try {
    const completion = await openai.chat.completions.create({
        model: 'gpt-4o-mini', //gpt-4o-mini //gpt-4o //gpt-3.5-turbo
        messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userInput }
        ],
        temperature: 0.7,
    });

    const content = completion.choices[0].message.content;
    if (!content) {
      throw new Error("OpenAI returned empty content.");
    }

    try {
      const parsedContent = JSON.parse(content);
      return parsedContent;
    } catch (parseError) {
      console.error("Error parsing OpenAI response:", parseError);
      console.error("Raw OpenAI response content:", content); // Log the raw content for debugging
      throw new Error("Failed to parse evaluation data from AI service.");
    }

  } catch (error) {
    console.error("Error calling OpenAI API:", error);
    // Re-throw a more generic error to the caller, or handle specific error types
    throw new Error("Failed to get evaluation from AI service.");
  }
};

module.exports = { generateWritingResponse };


